#!/usr/bin/env python
import os, re
import json

# get some information about the test
modelname = raw_input("modelname=")
path = raw_input("path=")
directory = path

# from here on out, we will be in the test's directory
here = os.getcwd()
os.chdir(directory)

#=========================================================
# now, we check that the
# 1. files exist that should - 
#   a. executable with executable bit set
#   b. .kim file of the same name
#   c. pipeline.{in,out}
#   d. Makefile 
#
# 2. all names match the KIM id, including those in
#    the .kim file and really any other references
#
#==========================================================
title = "Proper files exist and executable bit set"
critical = True
passed = True
errors = []

def fail(reason):
    global errors, passed
    passed = False
    errors.append(reason)

def file_contains(filename, pattern):
    matcher = re.compile(pattern)
    with open(filename) as f:
        contents = f.readlines()
        for c in contents:
            m = matcher.match(c)
            if m is not None:
                return True
    return False

sharedobj = "libkim-api-model-v1.so"
if not os.path.isfile(sharedobj):
    fail("Executable " + sharedobj + " does not exist.")
if not os.access(sharedobj, os.X_OK):
    fail("File " + sharedobj + " is not executable.")

kimfile = "descriptor.kim"
if not os.path.isfile(kimfile):
    fail("KIM file " + kimfile + " does not exist.")

if not os.path.isfile("Makefile"):
    fail("No Makefile provided by test.")

os.chdir(here)
results = {
    "property-id": "tag:staff@noreply.openkim.org,2014-08-05:property/verification-check",
    "instance-id": 1,
    "passed": passed,
    "errors": errors,
    "critical": critical,
    "title": title
}

json.dump(
    [results], open("output/results.edn", "w"), 
    separators=(' ', ' '), indent=4
)
